---- head Matches (256 in 16 files) ----
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	int header;
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	struct message * head;
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	struct message *m = db->head;
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		db->head = db->tail = NULL;
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		db->head = m->next;
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		struct message *current = db->head;
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	if (db->head == NULL) {
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		db->head = db->tail = m;
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):databuffer_readheader(struct databuffer *db, struct messagepool *mp, int header_size) {
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	if (db->header == 0) {
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		// parser header (2 or 4)
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		if (db->size < header_size) {
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		databuffer_read(db,mp,(char *)plen,header_size);
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		if (header_size == 2) {
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):			db->header = plen[0] << 8 | plen[1];
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):			db->header = plen[0] << 24 | plen[1] << 16 | plen[2] << 8 | plen[3];
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	if (db->size < db->header)
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	return db->header;
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	db->header = 0;
Databuffer.h (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	while (db->head) {
Lsproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	// the worst-case space overhead of packing is 2 bytes per 2 KiB of input (256 words = 2KiB).
Lua-bson.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):static uint8_t oid_header[5];
Lua-bson.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):init_oid_header() {
Lua-bson.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	oid_header[0] = h & 0xff;
Lua-bson.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	oid_header[1] = (h>>8) & 0xff;
Lua-bson.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	oid_header[2] = (h>>16) & 0xff;
Lua-bson.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	oid_header[3] = pid & 0xff;
Lua-bson.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	oid_header[4] = (pid >> 8) & 0xff;
Lua-bson.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		memcpy(oid+6 , oid_header, 5);
Lua-bson.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	init_oid_header();
Lua-clientsocket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	int head;
Lua-clientsocket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		if (q->head == q->tail) {
Lua-clientsocket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	if (q->head == q->tail) {
Lua-clientsocket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	char * str = q->queue[q->head];
Lua-clientsocket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	if (++q->head >= QUEUE_SIZE) {
Lua-clientsocket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		q->head = 0;
Lua-cluster.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):fill_header(lua_State *L, uint8_t *buf, int sz) {
Lua-cluster.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		fill_header(L, buf, sz+9);
Lua-cluster.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		fill_header(L, buf, 13);
Lua-cluster.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		fill_header(L, buf, sz+6+namelen);
Lua-cluster.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		fill_header(L, buf, 10+namelen);
Lua-cluster.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		fill_header(L, buf, s+5);
Lua-cluster.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	fill_header(L, buf, sz+1);
Lua-cluster.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):			fill_header(L, buf, 9);
Lua-cluster.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):				fill_header(L, buf, s+5);
Lua-cluster.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	fill_header(L, buf, sz+5);
Lua-debugchannel.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	struct command * head;
Lua-debugchannel.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	struct command * p = c->head;
Lua-debugchannel.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	c->head = NULL;
Lua-debugchannel.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	if (c->head == NULL) {
Lua-debugchannel.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	ret = c->head;
Lua-debugchannel.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	c->head = ret->next;
Lua-debugchannel.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	if (c->head == NULL) {
Lua-debugchannel.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		c->head = c->tail = cmd;
Lua-mongo.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		// make package header, don't raise L error
Lua-mongo.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		// make package header, don't raise L error
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	int header;
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	int head;
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	if (q->head > q->tail) {
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	for (i=q->head;i<q->tail;i++) {
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	q->head = q->tail = 0;
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		q->head = 0;
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	nq->head = 0;
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		int idx = (q->head + i) % q->cap;
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	q->head = q->tail = 0;
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	if (q->head == q->tail) {
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		uc->header = *buffer;
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):			pack_size |= uc->header << 8 ;
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):			uc->header = *buffer;
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	if (q == NULL || q->head == q->tail)
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	struct netpack *np = &q->queue[q->head];
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	if (++q->head >= q->cap) {
Lua-netpack.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		q->head = 0;
Lua-seri.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	struct block * head;
Lua-seri.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	wb->head = b;
Lua-seri.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	wb->current = wb->head;
Lua-seri.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	struct block *blk = wb->head;
Lua-seri.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	wb->head = NULL;
Lua-seri.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	assert(wb.head == &temp);
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	struct buffer_node *head;
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	sb->head = NULL;
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	if (sb->head == NULL) {
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		sb->head = sb->tail = free_node;
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	struct buffer_node *free_node = sb->head;
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	sb->head = free_node->next;
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	if (sb->head == NULL) {
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	struct buffer_node * current = sb->head;
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		current = sb->head;
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):lheader(lua_State *L) {
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	while(sb->head) {
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	while(sb->head) {
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		struct buffer_node *current = sb->head;
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):	struct buffer_node *current = sb->head;
Lua-socket.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src):		{ "header", lheader },
Service_gate.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	int header_size;
Service_gate.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		int size = databuffer_readheader(&c->buffer, &g->mp, g->header_size);
Service_gate.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	char header;
Service_gate.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	int n = sscanf(parm, "%c %s %s %d %d", &header, watchdog, binding, &client_tag, &max);
Service_gate.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	if (header != 'S' && header !='L') {
Service_gate.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		skynet_error(ctx, "Invalid data header style");
Service_gate.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	g->header_size = header=='S' ? 2 : 4;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):// 12 is sizeof(struct remote_message_header)
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):struct remote_message_header {
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	struct remote_message_header header;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	int head;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	if (((queue->tail + 1) % queue->size) == queue->head) {
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):			new_buffer[i] = queue->data[(i+queue->head) % queue->size];
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		queue->head = 0;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):push_queue(struct harbor_msg_queue * queue, void * buffer, size_t sz, struct remote_message_header * header) {
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	m.header = *header;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	if (queue->head == queue->tail) {
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	struct harbor_msg * slot = &queue->data[queue->head];
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	queue->head = (queue->head + 1) % queue->size;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	queue->head = 0;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):header_to_message(const struct remote_message_header * header, uint8_t * message) {
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	to_bigendian(message , header->source);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	to_bigendian(message+4 , header->destination);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	to_bigendian(message+8 , header->session);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):message_to_header(const uint32_t *message, struct remote_message_header *header) {
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	header->source = from_bigendian(message[0]);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	header->destination = from_bigendian(message[1]);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	header->session = from_bigendian(message[2]);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	struct remote_message_header header;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	message_to_header((const uint32_t *)cookie, &header);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	uint32_t destination = header.destination;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	if (skynet_send(h->ctx, header.source, destination, type | PTYPE_TAG_DONTCOPY , (int)header.session, (void *)msg, sz-HEADER_COOKIE_LENGTH) < 0) {
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):			skynet_send(h->ctx, destination, header.source , PTYPE_ERROR, (int)header.session, NULL, 0);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		skynet_error(h->ctx, "Unknown destination :%x from :%x type(%d)", destination, header.source, type);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):send_remote(struct skynet_context * ctx, int fd, const char * buffer, size_t sz, struct remote_message_header * cookie) {
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	size_t sz_header = sz+sizeof(*cookie);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	if (sz_header > UINT32_MAX) {
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	uint8_t * sendbuf = skynet_malloc(sz_header+4);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	to_bigendian(sendbuf, (uint32_t)sz_header);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	header_to_message(cookie, sendbuf+4+sz);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):	skynet_socket_send(ctx, fd, sendbuf, sz_header+4);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):					int type = m->header.destination >> HANDLE_REMOTE_SHIFT;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):					skynet_send(context, m->header.source, handle , type | PTYPE_TAG_DONTCOPY, m->header.session, m->buffer, m->size);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		m->header.destination |= (handle & HANDLE_MASK);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		send_remote(context, fd, m->buffer, m->size, &m->header);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		send_remote(h->ctx, fd, m->buffer, m->size, &m->header);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):			struct remote_message_header header;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):			header.source = source;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):			header.destination = (type << HANDLE_REMOTE_SHIFT) | (destination & HANDLE_MASK);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):			header.session = (uint32_t)session;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):			push_queue(s->queue, (void *)msg, sz, &header);
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		struct remote_message_header cookie;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		struct remote_message_header header;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		header.source = source;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		header.destination = type << HANDLE_REMOTE_SHIFT;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		header.session = (uint32_t)session;
Service_harbor.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\service-src):		push_queue(node->queue, (void *)msg, sz, &header);
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	int head;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	struct message_queue *head;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		q->head = q->tail = queue;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	struct message_queue *mq = q->head;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		q->head = mq->next;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		if(q->head == NULL) {
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	q->head = 0;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	int head, tail,cap;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	head = q->head;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	if (head <= tail) {
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		return tail - head;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	return tail + cap - head;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	if (q->head != q->tail) {
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		*message = q->queue[q->head++];
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		int head = q->head;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		if (head >= cap) {
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):			q->head = head = 0;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		int length = tail - head;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		new_queue[i] = q->queue[(q->head + i) % q->cap];
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	q->head = 0;
Skynet_mq.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	if (q->head == q->tail) {
Skynet_timer.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	struct timer_node head;
Skynet_timer.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	struct timer_node * ret = list->head.next;
Skynet_timer.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	list->head.next = 0;
Skynet_timer.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	list->tail = &(list->head);
Skynet_timer.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	while (T->near[idx].head.next) {
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	struct write_buffer * head;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	uint8_t header[8];	// 6 bytes dummy
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	list->head = NULL;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	struct write_buffer *wb = list->head;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	list->head = NULL;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	assert(s->head == NULL);
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	while (list->head) {
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		struct write_buffer * tmp = list->head;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		list->head = tmp->next;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	list->head = tmp->next;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	if (list->head == NULL)
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	while (list->head) {
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		struct write_buffer * tmp = list->head;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		list->head = tmp->next;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	struct write_buffer *wb = s->head;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	struct write_buffer *tmp = low->head;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	low->head = tmp->next;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	if (low->head == NULL) {
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	// move head of low list (tmp) to the empty high list
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	assert(high->head == NULL);
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	high->head = high->tail = tmp;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	return (s->high.head == NULL && s->low.head == NULL);
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	3. If low list head is uncomplete (send a part before), move the head of low list to empty high list (call raise_uncomplete) .
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	if (s->high.head == NULL) {
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		if (s->low.head != NULL) {
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):			if (s->low.head)
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		// add direct write buffer before high.head
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		if (s->high.head == NULL) {
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):			s->high.head = s->high.tail = buf;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):			buf->next = s->high.head;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):			s->high.head = buf;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	if (s->head == NULL) {
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		s->head = s->tail = buf;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	uint8_t header[2];
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	block_readpipe(fd, header, sizeof(header));
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	int type = header[0];
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	int len = header[1];
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	request->header[6] = (uint8_t)type;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):	request->header[7] = (uint8_t)len;
Socket_server.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\skynet-src):		ssize_t n = write(ss->sendctrl_fd, &request->header[6], len+2);
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	struct chunk * header;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	p->header = NULL;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	struct chunk * tmp = p->header;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	t->next = p->header;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	p->header = t;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):		p->current = p->header;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):		p->current = p->header;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	int fn, header, i;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	header = SIZEOF_HEADER + SIZEOF_FIELD * fn;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	if (sz < header)
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	sz -= header;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	stream += header;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	uint8_t * header = buffer;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):					memcpy(header+1+i*SIZEOF_INT64, header+1+i*SIZEOF_INT32, SIZEOF_INT32);
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):					negative = header[1+i*SIZEOF_INT64+3] & 0x80;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):					uint32_to_uint64(negative, header+1+i*SIZEOF_INT64);
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	if (buffer == header + 1) {
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):		return header;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	*header = (uint8_t)intlen;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	uint8_t * header = buffer;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	int header_sz = SIZEOF_HEADER + st->maxn * SIZEOF_FIELD;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	if (size < header_sz)
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	data = header + header_sz;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	size -= header_sz;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):			record = header+SIZEOF_HEADER+SIZEOF_FIELD*index;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	header[0] = index & 0xff;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	header[1] = (index >> 8) & 0xff;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	datasz = data - (header + header_sz);
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	data = header + header_sz;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):		memmove(header + SIZEOF_HEADER + index * SIZEOF_FIELD, data, datasz);
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):	uint8_t header = 0;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):			header |= 1<<i;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):		*obuffer = header;
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):		uint8_t header = src[0];
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):		if (header == 0xff) {
Sproto.c (e:\ft_gateway_linux_sys\skynet_core_v1.0.0\tmp_skynet\lualib-src\sproto):				int nz = (header >> i) & 1;
